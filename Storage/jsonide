/* til HTML

Approach: We have an HTML form containing several fields such as name, college, etc. We want to send the data of our HTML form directly to the JSON file. For this we are using json_encode() function which returns a JSON encoded string.

We are making an array of values that the user fills in the HTML form. Then we pass this array into json_encode() function. Then json_encode() function returns a JSON encoded string. The whole task is implemented in a PHP function get_data(). To create a JSON file we used PHP function file_put_contents(). This function is used to write data to a file. We pass 2 arguments in file_put_contents() function. The first parameter is our file name in which we want to store data in the JSON format and second is our get_data() function.

Example: The following HTML and PHP codes demonstrates the above approach.
<meta charset="UTF-8"> 
<form method="post" action="gfg.php"> 



    
    if ($_SERVER['REQUEST_METHOD'] == 'POST') { 
          
        function get_data() { 
            $datae = array(); 
            $datae[] = array( 
                'Name' => $_POST['name'], 
                'Branch' => $_POST['branch'], 
                'College' => $_POST['college'], 
            ); 
            return json_encode($datae); 
        } 
          
        $name = "gfg"; 
        $file_name = $name . '.json'; 
       
        if(file_put_contents( 
            "$file_name", get_data())) { 
                echo $file_name .' file created'; 
            } 
        else { 
            echo 'There is some error'; 
        } 
    } 
?> 
Output: The content of “gfg.json” file shows the following data in JSON format.

*/